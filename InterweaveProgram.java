package program1;import java.util.Arrays;import java.util.Collections;import java.util.ArrayList;/** * class Interweave will check if string s is an interweaving of string x and string y * @author Jennifer Lim */public class Interweave {	public static boolean checkInterweave(String s, String x, String y) 	{		int pointer_x = 0; // pointer for string x		int pointer_y = 0; // pointer for string y		int x_; // noise from x		int y_; // noise from y		ArrayList<Integer> x_indices = new ArrayList<Integer>(); // array[] for storing x indices		ArrayList<Integer> y_indices = new ArrayList<Integer>(); // array[] for storing y indices		ArrayList<Integer> noise_indices = new ArrayList<Integer>(); // array[] for storing noise indices		ArrayList<Integer> noise_values = new ArrayList<Integer>(); // array[] for storing noise values				// for loop checks each character in string s		// "pointers" will first be set to the beginning of x_indices and y_indices and be incremented accordingly		int comparison = 0;		for (int i = 0; i < s.length(); i++) 		{			// if the length of string s is less than length of string x + y			if (s.length() < (x.length() + y.length())) 			{				System.out.println("length of received signal s is too short");				return false;			}				if ((s.charAt(i) == x.charAt(pointer_x)) && (s.charAt(i) == y.charAt(pointer_y))) 																					// same value			{									if (pointer_y != 0) 					{	comparison++;						y_indices.add(i);						pointer_y += 1;						if (pointer_y == y.length()) // if you're at the last index of x, set pointer to index position 0						{							pointer_y = 0;						}					} 					else if (pointer_x != 0) 					{   comparison++;						x_indices.add(i);						pointer_x += 1;						if (pointer_x == x.length()) // if you're at the last index of x, set pointer to index position 0						{							pointer_x = 0;						}					}					else if (pointer_x == 0 && pointer_y ==0) 					{   comparison++;						x_indices.add(i);						pointer_x += 1;						if (pointer_x == x.length()) // if you're at the last index of x, set pointer to index position 0						{							pointer_x = 0;						}					}			}			else if (s.charAt(i) == x.charAt(pointer_x)) // check the index value at x and y			{   comparison++;								x_indices.add(i);				pointer_x += 1;				if (pointer_x == x.length()) // if you're at the last index of x, set pointer to index position 0				{					pointer_x = 0;				}											}			else if (s.charAt(i) == y.charAt(pointer_y)) 			{   comparison++;				y_indices.add(i);				pointer_y += 1;				if (pointer_y == y.length()) // if you're at the last index of x, set pointer to index position 0				{					pointer_y = 0;				}							} 			else			{				noise_indices.add(i);			}				}		/** 		 * if pointer for x and y are not set to the beginning of x and y 		 * this means we have an incomplete x or y array - which count as tail noise		 * noise check for "tail noise"		 */		if ((pointer_x != 0 || (pointer_y) != 0) || noise_indices.size()>0)		{				int x_size = x_indices.size();			int y_size = y_indices.size();			x_ = x_indices.size() % 3;			y_ = y_indices.size()% 3;			int x_length2 = ((x_size) - (x_));			int y_length2 = (y_size - y_);						// noise check front "front noise"			if (noise_indices.size() != 0)			{				for (int i = 0; i < s.length(); i++)				{					if (s.charAt(i) == s.charAt(i+1))					{   comparison++;						if (noise_indices.contains(i+1)) 						{   comparison++;							int value = noise_indices.indexOf(i+1);							int value_decrement = i;							noise_indices.set(value, value_decrement);							if (x_indices.contains(i))							{   comparison++;								x_indices.remove(i);								x_indices.add(i+1);							}							else if (y_indices.contains(i))							{   comparison++;								y_indices.remove(i);								y_indices.add(i+1);							}						}						else if (!noise_indices.contains(i+1))						{							break;						}					}					else					{						break;					}				}			}									Collections.sort(x_indices);			Collections.sort(y_indices);			System.out.println("\nRepetitions of x at: ");			System.out.print("[ |");			for (int i = 0; i <= x_indices.size(); i++)			{				if ((i)%3==0 && (i != 0))				{					System.out.print("| ");				}				if (i%3 !=0 && i!= x_indices.size())				{					System.out.print(", ");				}				if (i == (x_length2-1))				{					System.out.print(x_indices.get(i));				}				if (i == x_length2)				{					noise_indices.add((x_indices.get(i)));				}				else if (i< x_length2-1)				{					System.out.print(x_indices.get(i));				}			}			System.out.print("]");						System.out.println("\n\nRepetitions of y at: ");			System.out.print("[ ");			for (int i = 0; i <= y_indices.size(); i++)			{				if ((i)%3==0 && (i != y_length2))				{					System.out.print("| ");				}				if (i%3 !=0 && i!= y_indices.size())				{					System.out.print(", ");				}				if (i == (y_length2-1))				{					System.out.print(y_indices.get(i));				}				else if (i< y_length2-1)				{					System.out.print(y_indices.get(i));				}			}			System.out.print("| ]");			Collections.sort(noise_indices);			System.out.println("\n\nNoise indices: " + noise_indices);			System.out.println("\nComparisons: "+comparison);			return false;							}		Collections.sort(x_indices);		System.out.println("\nRepetitions of x at: ");		System.out.print("[ ");		for (int i = 0; i <= x_indices.size(); i++)		{			if ((i)%3==0 && (i != x_indices.size()))			{				System.out.print("| ");			}			if (i%3 !=0 && i!= x_indices.size())			{				System.out.print(", ");			}			if (i == (x_indices.size()-1))			{				System.out.print(x_indices.get(i));			}			else if (i < x_indices.size()-1)			{				System.out.print(x_indices.get(i));			}		}		System.out.print("| ]");				Collections.sort(x_indices);		if (y.length()==1)		{			System.out.println("\n\nRepetition of y at: \n"+ y_indices);		}				Collections.sort(x_indices);		if (y.length()>1)		{		System.out.println("\n\nRepetitions of y at: ");		System.out.print("[ ");		for (int i = 0; i <= y_indices.size(); i++)		{			if ((i)%3==0 && (i != y_indices.size()))			{				System.out.print("| ");			}			if (i%3 !=0 && i!= y_indices.size())			{				System.out.print(", ");			}			if (i == (x_indices.size()-1))			{				System.out.print(x_indices.get(i));			}			else if (i < x_indices.size()-1)			{				System.out.print(x_indices.get(i));			}		}		System.out.print("| ]");		}		System.out.println("Comparisons: "+comparison);		return true;		}		public static void main(String[] args) 	{		String x = "101"; // example string x		String y = "0"; // example string y		String s = "10001101000101"; // example of string s		// C = "100110011001";		// B = "001100010101010101010111";		// A = "101010101010101010";		// para4 = "10001101000101";			System.out.println("Test case PARA4\nLet x = " + x + ", y = " + y + ", s = " + s);		boolean interweave = checkInterweave(s, x, y);		if (interweave) 		{			System.out.println("\n\ns is an interweaving of x and y");		} 		else 		{			System.out.println("s is not an interweaving of x and y");		}	}}